server.context-path=/ehprofile
server.port=8082
app.header.from-public-network=x-request-from-internet
#---------------- Datasource props --------------------------------------------------
spring.datasource.platform=postgres
spring.datasource.driverClassName=org.postgresql.Driver
spring.datasource.url=jdbc:postgresql://fluance-stunnel:5432/ehprofile?ssl=true
spring.datasource.username=authenticator
spring.datasource.password=12345

# The following should all trigger validation of (idle) connections
# and when an exception occurs or the idle period has passed
# the connections will be removed from the pool.
spring.datasource.tomcat.max-active=30
# specify the number of initial connections
spring.datasource.tomcat.initial-size=8
# specify the min and max number of idle connections
spring.datasource.tomcat.max-idle=8
spring.datasource.tomcat.min-idle=1
# To validate connection we need to specify a validation-query and when to validate.
# As we want to validate periodically,
# instead of when a connection is retrieved from the pool
# (this to prevent broken connections in our pool).
spring.datasource.tomcat.test-while-idle=true
spring.datasource.tomcat.test-on-borrow=true
################################ IMPORTANT : FOR KEEPING CONNECTION TO FOREIGN TABLES !!! ######################################################
spring.datasource.tomcat.validation-query=SELECT 1 from company limit 1
###################################################################################################
# Now that we are also validating while a connection is idle,
# we need to specify how often we want to run this query
# for the connections and when a connection is considered idle.
# defaults to 5000
spring.datasource.tomcat.time-between-eviction-runs-millis=5000
# defaults to 60000
spring.datasource.tomcat.min-evictable-idle-time-millis=60000

# Hibernate specific settings
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.database-platform=net.fluance.app.spring.data.support.orm.hibernate.dialect.JsonPostgreSQL9Dialect

springfox.swagger.enable=true

#oauth2.service.url.AuthorizationHeader = Basic Zmx1YW5jZTpkZW1v
oauth2.service.url.getUserInfos = https://auth.fluance.net:8081/authentication/userinfo

# The username that is allowed to perform IdM operations through local/fluance API.
# fluance username is hardcoded in /auth API as of version 2.2.0
# It is currently be associated with password
identity.management.local.username=fluance
identity.management.local.password=${application.user.shared-password}
 
# The bakend URL to read the list of ID domains
identity.domains.list.url=https://auth.fluance.net:8081/authentication/identity/domains

#Secure Spring actuator endpoints
endpoints.sensitive=true

### Import Profiles: Column Mapping
security.admin.profile.import.username=2
security.admin.profile.import.opale=3
security.admin.profile.import.polypoint=4
security.admin.profile.import.role=6
security.admin.profile.import.company=7
security.admin.profile.import.hospservice=8
security.admin.profile.import.units=9

#----------------------------------------------------------------------------------------
#Secure Spring actuator endpoints
endpoints.actuator.enabled=true
endpoints.sensitive=true
endpoints.jmx.unique-names=true
management.security.enabled=true
management.health.solr.enabled=false
############################Spring boot admin Client ###########################################
spring.boot.admin.url= https://spring-boot-admin.fluance.net:6060
spring.boot.admin.username=admin
spring.boot.admin.password=12345
spring.application.name=Eh Profile
spring.boot.admin.client.service-url=https://ehprofile.fluance.net:8082/ehprofile
spring.boot.admin.client.metadata.user.name=${security.user.name}
spring.boot.admin.client.metadata.user.password=${security.user.password}
endpoints.env.enabled=false

logging.file=/var/logs/logs/ehprofile.log
