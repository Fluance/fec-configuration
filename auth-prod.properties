app.header.from-public-network=x-request-from-internet
server.context-path=/authentication
server.port=8081
server.session.cookie.name=OAUTH2SESSION
#---------------- Datasource props --------------------------------------------------
spring.datasource.platform=postgres
spring.datasource.driverClassName=org.postgresql.Driver
spring.datasource.url=jdbc:postgresql://fluance-stunnel:5432/ehauth?ssl=true
spring.datasource.username=authenticator
spring.datasource.password=12345

# The following should all trigger validation of (idle) connections
# and when an exception occurs or the idle period has passed
# the connections will be removed from the pool.
spring.datasource.tomcat.max-active=30
# specify the number of initial connections
spring.datasource.tomcat.initial-size=8
# specify the min and max number of idle connections
spring.datasource.tomcat.max-idle=8
spring.datasource.tomcat.min-idle=1
# To validate connection we need to specify a validation-query and when to validate.
# As we want to validate periodically,
# instead of when a connection is retrieved from the pool
# (this to prevent broken connections in our pool).
spring.datasource.tomcat.test-while-idle=true
spring.datasource.tomcat.test-on-borrow=true
spring.datasource.tomcat.validation-query=SELECT 1
# Now that we are also validating while a connection is idle,
# we need to specify how often we want to run this query
# for the connections and when a connection is considered idle.
# defaults to 5000
spring.datasource.tomcat.time-between-eviction-runs-millis=5000
# defaults to 60000
spring.datasource.tomcat.min-evictable-idle-time-millis=60000

# Hibernate specific settings
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.database-platform=net.fluance.app.spring.data.support.orm.hibernate.dialect.JsonPostgreSQL9Dialect

oauth2.service.url.getToken=https://auth.fluance.net:8081/authentication/oauth/token
oauth2.service.url.validateToken=https://auth.fluance.net:8081/authentication/oauth/check_token
oauth2.service.url.revokeToken=https://auth.fluance.net:8081/authentication/oauth/revoke
oauth2.service.url.AuthorizationHeader = Basic abcdefghijklmnoprst
oauth2.service.url.getUserInfos = https://auth.fluance.net:8081/authentication/userinfo

wso2.issuer=local.fluance.ch
default.issuer=gsmn

saml.local.sp=local.fluance.ch
saml.local.idp=gsmn

oauth2.server.clientId=fluance
oauth2.server.clientSecret=12345

config.jwt-assertion.subject-id.allowed=domain,username,pid
config.jwt-assertion.user-info.allowed=sub,firstName,lastName,birthDate,sex
config.accesstoken.validity.seconds=14400
config.refreshtoken.validity.seconds=50400

api.patient.url=https://cockpit-app.fluance.net:8080/mw-app/patients

fluance.endpoints.revokeSessionController = false

#swagger
springfox.swagger.enable=true

############# Limit Spring & tomcat session to 1 min
server.session.timeout=1
server.session-timeout=1
#----------------------------------------------------------------------------------------
#Secure Spring actuator endpoints
endpoints.actuator.enabled=true
endpoints.sensitive=true
endpoints.jmx.unique-names=true
management.security.enabled=false
endpoints.env.enabled=false

spring.boot.admin.url=https://spring-boot-admin.fluance.net:6060
spring.boot.admin.username=admin
spring.boot.admin.password=12345
spring.application.name=AUTH
spring.boot.admin.client.service-url=https://auth.fluance.net:8081/authentication
spring.boot.admin.client.metadata.user.name=fluance
spring.boot.admin.client.metadata.user.password=12345

logging.file=/var/logs/logs/auth.log
